generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  password       String
  firstName      String?
  lastName       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  bookmarks      Bookmark[]
  categories     Category[]
  refreshTokens  RefreshToken[]
  
  @@index([email])
}

model Bookmark {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  tags        TagOnBookmark[]
  
  @@index([userId])
  @@index([categoryId])
  @@index([title])
  @@index([createdAt])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?    @db.Text
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([name, userId])
  @@index([userId])
}

model Tag {
  id          String         @id @default(uuid())
  name        String         @unique
  bookmarks   TagOnBookmark[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@index([name])
}

model TagOnBookmark {
  bookmarkId  String
  tagId       String
  bookmark    Bookmark  @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  
  @@id([bookmarkId, tagId])
  @@index([bookmarkId])
  @@index([tagId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
